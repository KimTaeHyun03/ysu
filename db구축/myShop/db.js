/**
 * ====================================================================
 * 데이터베이스 연결 및 관리 모듈 (db.js) - MySQL 버전
 * ====================================================================
 * 
 * 역할: MySQL 데이터베이스와의 연결을 관리하고 다른 모듈에서 사용할 수 있는
 *      데이터베이스 인스턴스를 제공하는 중앙 집중식 DB 관리 모듈
 * 
 * 주요 기능:
 * - MySQL 연결 풀(Connection Pool) 생성 및 관리
 * - 데이터베이스 연결 상태 모니터링
 * - 다른 모듈에서 사용할 db 인스턴스 export
 * - 연결 풀을 통한 성능 최적화
 * 
 * 사용하는 모듈:
 * - auth.js: 회원가입, 로그인 처리
 * - Main.js: 상품 조회, 장바구니 추가 API
 * - prodDetail: 상품 상세 정보 및 상품평 조회 API
 * - cartView.js: 장바구니 및 결제 관련 DB 작업
 * - myPage.js: 마이페이지 관련 DB 작업
 * ====================================================================
 */

// MySQL2 Promise 기반 드라이버 import
// mysql2/promise를 사용하여 async/await 패턴으로 DB 작업 가능
var mysql = require('mysql2/promise');

// 환경변수 로드를 위한 dotenv 패키지
require('dotenv').config();

/**
 * MySQL 연결 풀(Connection Pool) 생성
 * ====================================================================
 * 연결 풀을 사용하는 이유:
 * 1. 성능 향상: 매번 새 연결을 생성하지 않고 기존 연결 재사용
 * 2. 리소스 관리: 동시 연결 수 제한으로 서버 부하 방지
 * 3. 안정성: 연결 실패 시 자동 재연결 및 에러 핸들링
 * ====================================================================
 */

var db = mysql.createPool({
    host: process.env.MYSQL_HOST,            // 데이터베이스 서버 호스트 주소
    user: process.env.MYSQL_USER,            // 데이터베이스 사용자명
    password: process.env.MYSQL_PASSWORD,    // 데이터베이스 비밀번호
    database: process.env.MYSQL_DATABASE,    // 사용할 데이터베이스(스키마) 이름
    waitForConnections: true,                // 연결 대기 설정 (true: 사용 가능한 연결이 생길 때까지 대기, false: 즉시 에러 반환)
    connectionLimit: 10,                     // 연결 풀의 최대 연결 수(동시에 유지할 수 있는 최대 DB 연결 개수)
    queueLimit: 0                            // 대기열의 최대 크기 (0이면 무제한 대기열이 가능하나 메모리 사용량에 주의)
});

/**
 * 데이터베이스 연결 테스트 및 초기화
 * ====================================================================
 * 서버 시작 시 데이터베이스 연결 상태를 확인하여
 * 문제가 있을 경우 즉시 파악할 수 있도록 함
 * ====================================================================
 */
db.getConnection()
    .then(connection => {
        console.log('데이터베이스에 성공적으로 연결되었습니다.');
        
        // 연결 테스트 후 연결을 풀로 다시 반환(release()를 호출하지 않으면 연결이 계속 점유되어 성능 문제 발생)
        connection.release();       
    })
    .catch(err => {
        console.error('데이터베이스 연결 오류:', err);
    }); 

/**
 * 모듈 내보내기
 * ====================================================================
 * 다른 모듈에서 require('./db.js')로 이 db 인스턴스를 사용할 수 있음
 * 
 * 사용 예시:
 * const db = require('./db.js');
 * const [results] = await db.query('SELECT * FROM Products');
 * ====================================================================
 */
module.exports = db; 